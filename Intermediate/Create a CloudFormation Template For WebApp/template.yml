AWSTemplateFormatVersion: '2010-09-09'

Description: 
  The goal of this assignment is to create a CloudFormation stack that automates the deployment of a web application on AWS.
  The template creates a VPC with a public subnet and a private subnet. An Internet gateway is attached to the VPC, and 
  routing tables are configured for the public and private subnets. A security group is created for an Amazon EC2 instance with 
  rules allowing inbound HTTP and SSH traffic. An EC2 instance is launched in the public subnet. The instance runs a web server 
  and a python script to make a connection to the database. An Amazon RDS database instance is created in the private subnet.

Parameters:

  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.1.0.0/16
  
  PublicSubnetCIDR:
    Description: CIDR block for the public subnet
    Type: String
    Default: 10.1.1.0/24

  PrivateSubnetCIDR:
    Description: CIDR block for the private subnet
    Type: String
    Default: 10.1.2.0/24
  
  Private2SubnetCIDR:
    Description: CIDR block for the private subnet
    Type: String
    Default: 10.1.3.0/24
  
  EC2InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro 
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large

  RDSInstanceType:
    Description: RDS instance type
    Type: String
    Default: db.t2.micro
    AllowedValues:
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large

  RDSDBName:
    Description: The database name
    Type: String
    Default: myRDSDB

  RDSUsername:
    Description: The database admin account username
    Type: String
    Default: admin

  RDSPassword:
    Description: The database admin account password
    Type: String
    Default: secret123
    NoEcho: true
  
  MyEC2KeyPair:
    Description: The EC2 key pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
  
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW
  
  myVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway
  
  myPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet

  myPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet

  myPrivate2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref Private2SubnetCIDR
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private2Subnet

  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable
  
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable
  
  myPrivate2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private2RouteTable
  
  myPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: myVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
  
  myPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet
      RouteTableId: !Ref myPublicRouteTable

  myPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet
      RouteTableId: !Ref myPrivateRouteTable
  
  myPrivate2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivate2Subnet
      RouteTableId: !Ref myPrivate2RouteTable
  
  myEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2SecurityGroup

  myRDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn: 
      - myPrivateSubnet
      - myPrivate2Subnet
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds:
        - !Ref myPrivateSubnet
        - !Ref myPrivate2Subnet

      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSubnetGroup
      

  myRDSDBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    DependsOn: 
      - myEC2SecurityGroup
      - myPrivateSubnet
      - myPrivate2Subnet
      - myPublicSubnet
      - myInternetGateway
      - myVPCGatewayAttachment
      - myPublicRouteTable
      - myPrivateRouteTable
      - myPublicSubnetRouteTableAssociation
      - myPrivateSubnetRouteTableAssociation
      - myPrivate2SubnetRouteTableAssociation
      - myRDSDBSubnetGroup
      - myPublicRoute
      - myVPC 
    Properties:
      GroupDescription: Allow database access to ec2 instance only
      DBSecurityGroupIngress: 
        EC2SecurityGroupId: !Ref myEC2SecurityGroup
      EC2VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSecurityGroup
      
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: 
      - myRDSDBSecurityGroup
      - myRDSDBSubnetGroup
      - myPrivateSubnet
      - myPrivate2Subnet
    Properties:
      DBName: !Ref RDSDBName
      DBInstanceIdentifier: !Sub ${AWS::StackName}-DBInstance
      AllocatedStorage: 20
      DBInstanceClass: !Ref RDSInstanceType
      Engine: MySQL
      EngineVersion: 5.7
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      DBSubnetGroupName: !Ref myRDSDBSubnetGroup
      DBSecurityGroups:
        - !Ref myRDSDBSecurityGroup
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBInstance
        
  MyEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - myEC2SecurityGroup
      - myPublicSubnet
      - myPrivateSubnet
      - myPrivate2Subnet
      - myInternetGateway
      - myVPCGatewayAttachment
      - myPublicRouteTable
      - myPrivateRouteTable
      - myPublicSubnetRouteTableAssociation
      - myPrivateSubnetRouteTableAssociation
      - myPrivate2SubnetRouteTableAssociation
    Properties:
      ImageId: ami-0889a44b331db0194
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref MyEC2KeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref myEC2SecurityGroup
          SubnetId: !Ref myPublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2Instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          sudo yum update -y
          sudo yum install pip -y
          sudo yum install -y python3
          sudo pip3 install flask mysql-connector-python
          cat <<EOF > /home/ec2-user/app.py
          from flask import Flask
          import mysql.connector
          app = Flask(__name__)
          @app.route("/")
          def hello():
              conn = mysql.connector.connect(user='admin', password='secret123', host='${MyDBInstance.Endpoint.Address}', database='myRDSDB')
              cursor = conn.cursor()
              cursor.execute("CREATE TABLE IF NOT EXISTS messages (content VARCHAR(255))")
              cursor.execute("INSERT INTO messages (content) VALUES ('Hello, world!')")
              conn.commit()
              cursor.execute("SELECT content FROM messages")
              row = cursor.fetchone()
              if row is None:
                  return "No messages in database"
              else:
                  return "Message from database: " + row[0]
          if __name__ == "__main__":
              app.run(host='0.0.0.0', port=80)
          EOF
          sudo python3 /home/ec2-user/app.py &
          
Outputs:
  MyEC2Instance:
    Description: The public IP address of the newly created EC2 instance
    Value: !GetAtt MyEC2Instance.PublicIp
  MyDBInstance:
    Description: The endpoint of the newly created RDS instance
    Value: !GetAtt MyDBInstance.Endpoint.Address  
  MyDBInstancePort:
    Description: The port of the newly created RDS instance
    Value: !GetAtt MyDBInstance.Endpoint.Port
  MyDBInstanceUsername:
    Description: The username of the newly created RDS instance
    Value: !Ref RDSUsername
  MyVPC:
    Description: The ID of the newly created VPC
    Value: !Ref myVPC
  myPublicSubnet:
    Description: The ID of the newly created public subnet
    Value: !Ref myPublicSubnet
    