Description: AWS ALB Session Stickiness


Parameters:

#EC2 Instance Image (using latest ami)
  LastestAMI:
    Description: EC2 instance Latest AMI
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  #Auto Scaling Group

  AsgMax:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    Description: Autoscaling group with maximum supporiting instances
    ConstraintDescription: Allowed value is between 0 to 10 inclusive
    Default: 10
    Type: String

  AsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    Description: Autoscaling group with minimum supporiting instances
    ConstraintDescription: Allowed value is between 0 to 10 inclusive
    Default: 0
    Type: String

  AsgDesired:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    Description: Autoscaling group with desired supporiting instances
    ConstraintDescription: Allowed value is between 0 to 10 inclusive
    Default: 6 
    Type: String
    


Resources:

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: myvpc1

  WebInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: myvpc1-igw

  WebGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref WebInternetGateway

  
  WebRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: name
          Value: myvpc1-web-rt

  WebRoute:
    Type: AWS::EC2::Route
    DependsOn: WebGatewayAttach
    Properties:
      RouteTableId: !Ref WebRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref WebInternetGateway

  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs  '']
      VpcId: !Ref myVPC
      CidrBlock: 10.16.0.0/17
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sn-Public-A

  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs  '']
      VpcId: !Ref myVPC
      CidrBlock: 10.16.128.0/17
      MapPublicIpOnLaunch: true      
      Tags:
        - Key: Name
          Value: sn-Public-B
    
  RouteTableAssocSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref WebRouteTable
      
  RouteTableAssocSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicB
      RouteTableId: !Ref WebRouteTable
  
  SecurityGroupForWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebSG
      GroupDescription: Web Instance Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTP in from ALB'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref SGLoadBalancer
  SGLoadBalancer:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Control access to load balancer
        VpcId: !Ref myVPC
        SecurityGroupIngress:
          - Description: 'Allow HTTP IPv4 In'
            IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: '0.0.0.0/0'
        Tags:
          - Key: Name 
            Value: SBLoadBalancer
    
  WebRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal: 
              Service:
                - ec2.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore  

  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebRole
    
  InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: "t2.micro"
        ImageId: !Ref LastestAMI
        IamInstanceProfile:
          Name: !Ref WebInstanceProfile
        SecurityGroupIds:
          - !Ref SecurityGroupForWeb
        UserData:  
          Fn::Base64: !Sub |                
            #!/bin/bash -ex
                
            # STEP 1: Updates
            yum -y update

            # STEP 2: Install packages & Configuration 
            yum -y install httpd wget cowsay curl python3 pip3
            amazon-linux-extras install -y php7.2
            amazon-linux-extras install epel -y
            yum install stress -y 
            pip3 install random-dog
            systemctl enable httpd
            systemctl start httpd

            # STEP 3: Custom Random Web Page
            bgcolor=$(printf "%02x%02x%02x\n" $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)))
            instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            wget -O /var/www/html/dog.gif "http://thedogapi.com/api/images/get?format=src&type=gif&api_key=live_jbkmQuVYLoEfxaXdFsJgmkG9WVTVBHZNOizPH3P12z15A9wvvqQONNi2z9mK4WuS"
            echo "<html><head></head><body style=\"background-color:#$bgcolor;\">" >> /var/www/html/index.html
            echo "<center><h1>Page is served via Instance_Id : $instanceId</h1></center><br>" >> /var/www/html/index.html
            echo "<center><img src=\"dog.gif\"></center>" >> /var/www/html/index.html
            echo "</body></html>" >> /var/www/html/index.html

            # STEP 4 - permissions 
            usermod -a -G apache ec2-user   
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;

            # STEP 5 COWSAY
            echo "#!/bin/sh" > /etc/update-motd.d/40-cow
            echo 'cowsay "Amazon Linux 2 AMI - Animals4Life"' > /etc/update-motd.d/40-cow
            chmod 755 /etc/update-motd.d/40-cow
            rm /etc/update-motd.d/30-banner
            update-motd

  AutoScalingGroup: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
      LaunchTemplate:
        LaunchTemplateId: !Ref InstanceLaunchTemplate
        Version: "1"
      MaxSize: !Ref AsgMax
      MinSize: !Ref AsgMin
      DesiredCapacity: !Ref AsgDesired
      Tags: 
        - Key: "Name"
          Value: "DogWeb"
          PropagateAtLaunch: 'true'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 200
      TargetGroupARNs:
        - !Ref ALBTG
  
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: "ipv4"
      Scheme: "internet-facing"
      SecurityGroups: 
        - !Ref SGLoadBalancer
      Subnets: 
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
      Tags: 
        - Key: Name
          Value: !Join [ '', [ 'ALB-', !Ref 'AWS::StackName' ] ]
      Type: "application"
  
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
  
  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 40
      HealthCheckPath: /index.html
      HealthCheckTimeoutSeconds: 5
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref myVPC
      TargetGroupAttributes:
        - Key: stickiness.enabled 
          Value: false

Outputs:
  ALBURL:
    Description: The Load Balancer URL
    Value: !Sub 'http://${ALB.DNSName}' 